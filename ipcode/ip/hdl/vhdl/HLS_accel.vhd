-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity HLS_accel is
generic (
    C_S_AXI_CONTROL_BUS_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_CONTROL_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    INPUT_STREAM_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    INPUT_STREAM_TVALID : IN STD_LOGIC;
    INPUT_STREAM_TREADY : OUT STD_LOGIC;
    INPUT_STREAM_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    INPUT_STREAM_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    INPUT_STREAM_TUSER : IN STD_LOGIC_VECTOR (3 downto 0);
    INPUT_STREAM_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    INPUT_STREAM_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    INPUT_STREAM_TDEST : IN STD_LOGIC_VECTOR (4 downto 0);
    OUTPUT_STREAM_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    OUTPUT_STREAM_TVALID : OUT STD_LOGIC;
    OUTPUT_STREAM_TREADY : IN STD_LOGIC;
    OUTPUT_STREAM_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    OUTPUT_STREAM_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    OUTPUT_STREAM_TUSER : OUT STD_LOGIC_VECTOR (3 downto 0);
    OUTPUT_STREAM_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    OUTPUT_STREAM_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    OUTPUT_STREAM_TDEST : OUT STD_LOGIC_VECTOR (4 downto 0);
    s_axi_CONTROL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CONTROL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CONTROL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of HLS_accel is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "HLS_accel,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=164,HLS_SYN_DSP=12,HLS_SYN_FF=957,HLS_SYN_LUT=1298}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000001000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000010000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000100000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000001000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000010000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000100000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (18 downto 0) := "0000000001000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (18 downto 0) := "0000000010000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (18 downto 0) := "0000000100000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (18 downto 0) := "0000001000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (18 downto 0) := "0000010000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (18 downto 0) := "0000100000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (18 downto 0) := "0001000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (18 downto 0) := "0010000000000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (18 downto 0) := "0100000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (18 downto 0) := "1000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv11_546 : STD_LOGIC_VECTOR (10 downto 0) := "10101000110";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv14_34BC : STD_LOGIC_VECTOR (13 downto 0) := "11010010111100";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv15_61A8 : STD_LOGIC_VECTOR (14 downto 0) := "110000110101000";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv15_61A7 : STD_LOGIC_VECTOR (14 downto 0) := "110000110100111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal INPUT_STREAM_data_V_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal INPUT_STREAM_data_V_0_vld_in : STD_LOGIC;
    signal INPUT_STREAM_data_V_0_vld_out : STD_LOGIC;
    signal INPUT_STREAM_data_V_0_ack_in : STD_LOGIC;
    signal INPUT_STREAM_data_V_0_ack_out : STD_LOGIC;
    signal INPUT_STREAM_data_V_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal INPUT_STREAM_data_V_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal INPUT_STREAM_data_V_0_sel_rd : STD_LOGIC := '0';
    signal INPUT_STREAM_data_V_0_sel_wr : STD_LOGIC := '0';
    signal INPUT_STREAM_data_V_0_sel : STD_LOGIC;
    signal INPUT_STREAM_data_V_0_load_A : STD_LOGIC;
    signal INPUT_STREAM_data_V_0_load_B : STD_LOGIC;
    signal INPUT_STREAM_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal INPUT_STREAM_data_V_0_state_cmp_full : STD_LOGIC;
    signal INPUT_STREAM_dest_V_0_vld_in : STD_LOGIC;
    signal INPUT_STREAM_dest_V_0_ack_out : STD_LOGIC;
    signal INPUT_STREAM_dest_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal OUTPUT_STREAM_data_V_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal OUTPUT_STREAM_data_V_1_vld_in : STD_LOGIC;
    signal OUTPUT_STREAM_data_V_1_vld_out : STD_LOGIC;
    signal OUTPUT_STREAM_data_V_1_ack_in : STD_LOGIC;
    signal OUTPUT_STREAM_data_V_1_ack_out : STD_LOGIC;
    signal OUTPUT_STREAM_data_V_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal OUTPUT_STREAM_data_V_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal OUTPUT_STREAM_data_V_1_sel_rd : STD_LOGIC := '0';
    signal OUTPUT_STREAM_data_V_1_sel_wr : STD_LOGIC := '0';
    signal OUTPUT_STREAM_data_V_1_sel : STD_LOGIC;
    signal OUTPUT_STREAM_data_V_1_load_A : STD_LOGIC;
    signal OUTPUT_STREAM_data_V_1_load_B : STD_LOGIC;
    signal OUTPUT_STREAM_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal OUTPUT_STREAM_data_V_1_state_cmp_full : STD_LOGIC;
    signal OUTPUT_STREAM_keep_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal OUTPUT_STREAM_keep_V_1_vld_in : STD_LOGIC;
    signal OUTPUT_STREAM_keep_V_1_vld_out : STD_LOGIC;
    signal OUTPUT_STREAM_keep_V_1_ack_in : STD_LOGIC;
    signal OUTPUT_STREAM_keep_V_1_ack_out : STD_LOGIC;
    signal OUTPUT_STREAM_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal OUTPUT_STREAM_keep_V_1_sel : STD_LOGIC;
    signal OUTPUT_STREAM_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal OUTPUT_STREAM_strb_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal OUTPUT_STREAM_strb_V_1_vld_in : STD_LOGIC;
    signal OUTPUT_STREAM_strb_V_1_vld_out : STD_LOGIC;
    signal OUTPUT_STREAM_strb_V_1_ack_in : STD_LOGIC;
    signal OUTPUT_STREAM_strb_V_1_ack_out : STD_LOGIC;
    signal OUTPUT_STREAM_strb_V_1_sel_rd : STD_LOGIC := '0';
    signal OUTPUT_STREAM_strb_V_1_sel : STD_LOGIC;
    signal OUTPUT_STREAM_strb_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal OUTPUT_STREAM_user_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal OUTPUT_STREAM_user_V_1_vld_in : STD_LOGIC;
    signal OUTPUT_STREAM_user_V_1_vld_out : STD_LOGIC;
    signal OUTPUT_STREAM_user_V_1_ack_in : STD_LOGIC;
    signal OUTPUT_STREAM_user_V_1_ack_out : STD_LOGIC;
    signal OUTPUT_STREAM_user_V_1_sel_rd : STD_LOGIC := '0';
    signal OUTPUT_STREAM_user_V_1_sel : STD_LOGIC;
    signal OUTPUT_STREAM_user_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal OUTPUT_STREAM_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_STREAM_last_V_1_vld_in : STD_LOGIC;
    signal OUTPUT_STREAM_last_V_1_vld_out : STD_LOGIC;
    signal OUTPUT_STREAM_last_V_1_ack_in : STD_LOGIC;
    signal OUTPUT_STREAM_last_V_1_ack_out : STD_LOGIC;
    signal OUTPUT_STREAM_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_STREAM_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_STREAM_last_V_1_sel_rd : STD_LOGIC := '0';
    signal OUTPUT_STREAM_last_V_1_sel_wr : STD_LOGIC := '0';
    signal OUTPUT_STREAM_last_V_1_sel : STD_LOGIC;
    signal OUTPUT_STREAM_last_V_1_load_A : STD_LOGIC;
    signal OUTPUT_STREAM_last_V_1_load_B : STD_LOGIC;
    signal OUTPUT_STREAM_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal OUTPUT_STREAM_last_V_1_state_cmp_full : STD_LOGIC;
    signal OUTPUT_STREAM_id_V_1_data_out : STD_LOGIC_VECTOR (4 downto 0);
    signal OUTPUT_STREAM_id_V_1_vld_in : STD_LOGIC;
    signal OUTPUT_STREAM_id_V_1_vld_out : STD_LOGIC;
    signal OUTPUT_STREAM_id_V_1_ack_in : STD_LOGIC;
    signal OUTPUT_STREAM_id_V_1_ack_out : STD_LOGIC;
    signal OUTPUT_STREAM_id_V_1_sel_rd : STD_LOGIC := '0';
    signal OUTPUT_STREAM_id_V_1_sel : STD_LOGIC;
    signal OUTPUT_STREAM_id_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal OUTPUT_STREAM_dest_V_1_data_out : STD_LOGIC_VECTOR (4 downto 0);
    signal OUTPUT_STREAM_dest_V_1_vld_in : STD_LOGIC;
    signal OUTPUT_STREAM_dest_V_1_vld_out : STD_LOGIC;
    signal OUTPUT_STREAM_dest_V_1_ack_in : STD_LOGIC;
    signal OUTPUT_STREAM_dest_V_1_ack_out : STD_LOGIC;
    signal OUTPUT_STREAM_dest_V_1_sel_rd : STD_LOGIC := '0';
    signal OUTPUT_STREAM_dest_V_1_sel : STD_LOGIC;
    signal OUTPUT_STREAM_dest_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal INPUT_STREAM_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond3_i_reg_531 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal exitcond2_i_reg_540 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal exitcond1_i_reg_549 : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_STREAM_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal exitcond_i_reg_648 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp3_iter2 : STD_LOGIC := '0';
    signal ap_reg_pp3_iter1_exitcond_i_reg_648 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_i_reg_255 : STD_LOGIC_VECTOR (10 downto 0);
    signal i1_0_i_reg_267 : STD_LOGIC_VECTOR (13 downto 0);
    signal i2_0_i_reg_279 : STD_LOGIC_VECTOR (14 downto 0);
    signal i3_0_i_reg_324 : STD_LOGIC_VECTOR (14 downto 0);
    signal M_reg_513 : STD_LOGIC_VECTOR (31 downto 0);
    signal N_reg_518 : STD_LOGIC_VECTOR (31 downto 0);
    signal K_reg_525 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond3_i_fu_342_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state5_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_fu_348_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_reg_535 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal exitcond2_i_fu_359_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state8_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state9_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal i_1_fu_365_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal i_1_reg_544 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal exitcond1_i_fu_376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state11_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state12_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal i_2_fu_382_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal i_2_reg_553 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal tmp_3_fu_397_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal i_3_fu_402_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_3_reg_562 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_7_fu_408_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_reg_567 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_413_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_reg_572 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_0_i_i_cast_fu_418_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_0_i_i_cast_reg_577 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal k_fu_427_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal k_reg_585 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_10_fu_422_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_PART_reg_595 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal tmp_14_fu_443_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_reg_600 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_fu_456_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal j_reg_608 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal tmp_17_fu_462_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_reg_613 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_451_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_477_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_reg_623 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal b_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_load_reg_633 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_load_reg_638 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal tmp_21_fu_481_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_reg_643 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_i_fu_490_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state21_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state22_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_state22_io : BOOLEAN;
    signal ap_block_state23_pp3_stage0_iter2 : BOOLEAN;
    signal ap_block_state23_io : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal i_4_fu_496_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal last_assign_fu_507_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal last_assign_reg_662 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state5 : STD_LOGIC;
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state8 : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state11 : STD_LOGIC;
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state21 : STD_LOGIC;
    signal a_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal a_ce0 : STD_LOGIC;
    signal a_we0 : STD_LOGIC;
    signal b_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal b_ce0 : STD_LOGIC;
    signal b_we0 : STD_LOGIC;
    signal c_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal c_ce0 : STD_LOGIC;
    signal c_we0 : STD_LOGIC;
    signal out_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_ce0 : STD_LOGIC;
    signal out_we0 : STD_LOGIC;
    signal out_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_i_0_i_phi_fu_259_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_phi_mux_i1_0_i_phi_fu_271_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_phi_mux_i2_0_i_phi_fu_283_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal i_0_i_i_reg_291 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal k_0_i_i_reg_302 : STD_LOGIC_VECTOR (30 downto 0);
    signal j_0_i_i_reg_313 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal tmp_2_fu_354_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_371_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_388_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_fu_438_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_20_fu_472_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_fu_502_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp3_stage0_01001 : BOOLEAN;
    signal i_0_i_i_cast_fu_393_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_408_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_9_fu_413_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_12_fu_433_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_443_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal j_0_i_i_cast_fu_447_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_fu_467_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_block_state24 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;

    component HLS_accel_a IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component HLS_accel_b IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component HLS_accel_c IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component HLS_accel_CONTROL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    HLS_accel_CONTROL_BUS_s_axi_U : component HLS_accel_CONTROL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CONTROL_BUS_AWVALID,
        AWREADY => s_axi_CONTROL_BUS_AWREADY,
        AWADDR => s_axi_CONTROL_BUS_AWADDR,
        WVALID => s_axi_CONTROL_BUS_WVALID,
        WREADY => s_axi_CONTROL_BUS_WREADY,
        WDATA => s_axi_CONTROL_BUS_WDATA,
        WSTRB => s_axi_CONTROL_BUS_WSTRB,
        ARVALID => s_axi_CONTROL_BUS_ARVALID,
        ARREADY => s_axi_CONTROL_BUS_ARREADY,
        ARADDR => s_axi_CONTROL_BUS_ARADDR,
        RVALID => s_axi_CONTROL_BUS_RVALID,
        RREADY => s_axi_CONTROL_BUS_RREADY,
        RDATA => s_axi_CONTROL_BUS_RDATA,
        RRESP => s_axi_CONTROL_BUS_RRESP,
        BVALID => s_axi_CONTROL_BUS_BVALID,
        BREADY => s_axi_CONTROL_BUS_BREADY,
        BRESP => s_axi_CONTROL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    a_U : component HLS_accel_a
    generic map (
        DataWidth => 32,
        AddressRange => 1350,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => a_address0,
        ce0 => a_ce0,
        we0 => a_we0,
        d0 => INPUT_STREAM_data_V_0_data_out,
        q0 => a_q0);

    b_U : component HLS_accel_b
    generic map (
        DataWidth => 32,
        AddressRange => 13500,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => b_address0,
        ce0 => b_ce0,
        we0 => b_we0,
        d0 => INPUT_STREAM_data_V_0_data_out,
        q0 => b_q0);

    c_U : component HLS_accel_c
    generic map (
        DataWidth => 32,
        AddressRange => 25000,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => c_address0,
        ce0 => c_ce0,
        we0 => c_we0,
        d0 => INPUT_STREAM_data_V_0_data_out,
        q0 => c_q0);

    out_U : component HLS_accel_c
    generic map (
        DataWidth => 32,
        AddressRange => 25000,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => out_address0,
        ce0 => out_ce0,
        we0 => out_we0,
        d0 => out_d0,
        q0 => out_q0);





    INPUT_STREAM_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                INPUT_STREAM_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = INPUT_STREAM_data_V_0_ack_out) and (ap_const_logic_1 = INPUT_STREAM_data_V_0_vld_out))) then 
                                        INPUT_STREAM_data_V_0_sel_rd <= not(INPUT_STREAM_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    INPUT_STREAM_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                INPUT_STREAM_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = INPUT_STREAM_data_V_0_ack_in) and (ap_const_logic_1 = INPUT_STREAM_data_V_0_vld_in))) then 
                                        INPUT_STREAM_data_V_0_sel_wr <= not(INPUT_STREAM_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    INPUT_STREAM_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                INPUT_STREAM_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = INPUT_STREAM_data_V_0_state) and (ap_const_logic_0 = INPUT_STREAM_data_V_0_vld_in)) or ((ap_const_lv2_3 = INPUT_STREAM_data_V_0_state) and (ap_const_logic_0 = INPUT_STREAM_data_V_0_vld_in) and (ap_const_logic_1 = INPUT_STREAM_data_V_0_ack_out)))) then 
                    INPUT_STREAM_data_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = INPUT_STREAM_data_V_0_state) and (ap_const_logic_0 = INPUT_STREAM_data_V_0_ack_out)) or ((ap_const_lv2_3 = INPUT_STREAM_data_V_0_state) and (ap_const_logic_0 = INPUT_STREAM_data_V_0_ack_out) and (ap_const_logic_1 = INPUT_STREAM_data_V_0_vld_in)))) then 
                    INPUT_STREAM_data_V_0_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = INPUT_STREAM_data_V_0_vld_in) and (ap_const_logic_1 = INPUT_STREAM_data_V_0_ack_out))) and not(((ap_const_logic_0 = INPUT_STREAM_data_V_0_ack_out) and (ap_const_logic_1 = INPUT_STREAM_data_V_0_vld_in))) and (ap_const_lv2_3 = INPUT_STREAM_data_V_0_state)) or ((ap_const_lv2_1 = INPUT_STREAM_data_V_0_state) and (ap_const_logic_1 = INPUT_STREAM_data_V_0_ack_out)) or ((ap_const_lv2_2 = INPUT_STREAM_data_V_0_state) and (ap_const_logic_1 = INPUT_STREAM_data_V_0_vld_in)))) then 
                    INPUT_STREAM_data_V_0_state <= ap_const_lv2_3;
                else 
                    INPUT_STREAM_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    INPUT_STREAM_dest_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                INPUT_STREAM_dest_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = INPUT_STREAM_dest_V_0_state) and (ap_const_logic_0 = INPUT_STREAM_dest_V_0_vld_in)) or ((ap_const_lv2_3 = INPUT_STREAM_dest_V_0_state) and (ap_const_logic_0 = INPUT_STREAM_dest_V_0_vld_in) and (ap_const_logic_1 = INPUT_STREAM_dest_V_0_ack_out)))) then 
                    INPUT_STREAM_dest_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = INPUT_STREAM_dest_V_0_state) and (ap_const_logic_0 = INPUT_STREAM_dest_V_0_ack_out)) or ((ap_const_lv2_3 = INPUT_STREAM_dest_V_0_state) and (ap_const_logic_0 = INPUT_STREAM_dest_V_0_ack_out) and (ap_const_logic_1 = INPUT_STREAM_dest_V_0_vld_in)))) then 
                    INPUT_STREAM_dest_V_0_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = INPUT_STREAM_dest_V_0_vld_in) and (ap_const_logic_1 = INPUT_STREAM_dest_V_0_ack_out))) and not(((ap_const_logic_0 = INPUT_STREAM_dest_V_0_ack_out) and (ap_const_logic_1 = INPUT_STREAM_dest_V_0_vld_in))) and (ap_const_lv2_3 = INPUT_STREAM_dest_V_0_state)) or ((ap_const_lv2_1 = INPUT_STREAM_dest_V_0_state) and (ap_const_logic_1 = INPUT_STREAM_dest_V_0_ack_out)) or ((ap_const_lv2_2 = INPUT_STREAM_dest_V_0_state) and (ap_const_logic_1 = INPUT_STREAM_dest_V_0_vld_in)))) then 
                    INPUT_STREAM_dest_V_0_state <= ap_const_lv2_3;
                else 
                    INPUT_STREAM_dest_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_STREAM_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_STREAM_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = OUTPUT_STREAM_data_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_STREAM_data_V_1_vld_out))) then 
                                        OUTPUT_STREAM_data_V_1_sel_rd <= not(OUTPUT_STREAM_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_STREAM_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_STREAM_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = OUTPUT_STREAM_data_V_1_ack_in) and (ap_const_logic_1 = OUTPUT_STREAM_data_V_1_vld_in))) then 
                                        OUTPUT_STREAM_data_V_1_sel_wr <= not(OUTPUT_STREAM_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_STREAM_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_STREAM_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = OUTPUT_STREAM_data_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_data_V_1_vld_in)) or ((ap_const_lv2_3 = OUTPUT_STREAM_data_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_data_V_1_vld_in) and (ap_const_logic_1 = OUTPUT_STREAM_data_V_1_ack_out)))) then 
                    OUTPUT_STREAM_data_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = OUTPUT_STREAM_data_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_data_V_1_ack_out)) or ((ap_const_lv2_3 = OUTPUT_STREAM_data_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_data_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_STREAM_data_V_1_vld_in)))) then 
                    OUTPUT_STREAM_data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = OUTPUT_STREAM_data_V_1_vld_in) and (ap_const_logic_1 = OUTPUT_STREAM_data_V_1_ack_out))) and not(((ap_const_logic_0 = OUTPUT_STREAM_data_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_STREAM_data_V_1_vld_in))) and (ap_const_lv2_3 = OUTPUT_STREAM_data_V_1_state)) or ((ap_const_lv2_1 = OUTPUT_STREAM_data_V_1_state) and (ap_const_logic_1 = OUTPUT_STREAM_data_V_1_ack_out)) or ((ap_const_lv2_2 = OUTPUT_STREAM_data_V_1_state) and (ap_const_logic_1 = OUTPUT_STREAM_data_V_1_vld_in)))) then 
                    OUTPUT_STREAM_data_V_1_state <= ap_const_lv2_3;
                else 
                    OUTPUT_STREAM_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_STREAM_dest_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_STREAM_dest_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = OUTPUT_STREAM_dest_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_STREAM_dest_V_1_vld_out))) then 
                                        OUTPUT_STREAM_dest_V_1_sel_rd <= not(OUTPUT_STREAM_dest_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_STREAM_dest_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_STREAM_dest_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = OUTPUT_STREAM_dest_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_dest_V_1_vld_in)) or ((ap_const_lv2_3 = OUTPUT_STREAM_dest_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_dest_V_1_vld_in) and (ap_const_logic_1 = OUTPUT_STREAM_dest_V_1_ack_out)))) then 
                    OUTPUT_STREAM_dest_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = OUTPUT_STREAM_dest_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_dest_V_1_ack_out)) or ((ap_const_lv2_3 = OUTPUT_STREAM_dest_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_dest_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_STREAM_dest_V_1_vld_in)))) then 
                    OUTPUT_STREAM_dest_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = OUTPUT_STREAM_dest_V_1_vld_in) and (ap_const_logic_1 = OUTPUT_STREAM_dest_V_1_ack_out))) and not(((ap_const_logic_0 = OUTPUT_STREAM_dest_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_STREAM_dest_V_1_vld_in))) and (ap_const_lv2_3 = OUTPUT_STREAM_dest_V_1_state)) or ((ap_const_lv2_1 = OUTPUT_STREAM_dest_V_1_state) and (ap_const_logic_1 = OUTPUT_STREAM_dest_V_1_ack_out)) or ((ap_const_lv2_2 = OUTPUT_STREAM_dest_V_1_state) and (ap_const_logic_1 = OUTPUT_STREAM_dest_V_1_vld_in)))) then 
                    OUTPUT_STREAM_dest_V_1_state <= ap_const_lv2_3;
                else 
                    OUTPUT_STREAM_dest_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_STREAM_id_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_STREAM_id_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = OUTPUT_STREAM_id_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_STREAM_id_V_1_vld_out))) then 
                                        OUTPUT_STREAM_id_V_1_sel_rd <= not(OUTPUT_STREAM_id_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_STREAM_id_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_STREAM_id_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = OUTPUT_STREAM_id_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_id_V_1_vld_in)) or ((ap_const_lv2_3 = OUTPUT_STREAM_id_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_id_V_1_vld_in) and (ap_const_logic_1 = OUTPUT_STREAM_id_V_1_ack_out)))) then 
                    OUTPUT_STREAM_id_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = OUTPUT_STREAM_id_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_id_V_1_ack_out)) or ((ap_const_lv2_3 = OUTPUT_STREAM_id_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_id_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_STREAM_id_V_1_vld_in)))) then 
                    OUTPUT_STREAM_id_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = OUTPUT_STREAM_id_V_1_vld_in) and (ap_const_logic_1 = OUTPUT_STREAM_id_V_1_ack_out))) and not(((ap_const_logic_0 = OUTPUT_STREAM_id_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_STREAM_id_V_1_vld_in))) and (ap_const_lv2_3 = OUTPUT_STREAM_id_V_1_state)) or ((ap_const_lv2_1 = OUTPUT_STREAM_id_V_1_state) and (ap_const_logic_1 = OUTPUT_STREAM_id_V_1_ack_out)) or ((ap_const_lv2_2 = OUTPUT_STREAM_id_V_1_state) and (ap_const_logic_1 = OUTPUT_STREAM_id_V_1_vld_in)))) then 
                    OUTPUT_STREAM_id_V_1_state <= ap_const_lv2_3;
                else 
                    OUTPUT_STREAM_id_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_STREAM_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_STREAM_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = OUTPUT_STREAM_keep_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_STREAM_keep_V_1_vld_out))) then 
                                        OUTPUT_STREAM_keep_V_1_sel_rd <= not(OUTPUT_STREAM_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_STREAM_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_STREAM_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = OUTPUT_STREAM_keep_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_keep_V_1_vld_in)) or ((ap_const_lv2_3 = OUTPUT_STREAM_keep_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_keep_V_1_vld_in) and (ap_const_logic_1 = OUTPUT_STREAM_keep_V_1_ack_out)))) then 
                    OUTPUT_STREAM_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = OUTPUT_STREAM_keep_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_keep_V_1_ack_out)) or ((ap_const_lv2_3 = OUTPUT_STREAM_keep_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_keep_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_STREAM_keep_V_1_vld_in)))) then 
                    OUTPUT_STREAM_keep_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = OUTPUT_STREAM_keep_V_1_vld_in) and (ap_const_logic_1 = OUTPUT_STREAM_keep_V_1_ack_out))) and not(((ap_const_logic_0 = OUTPUT_STREAM_keep_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_STREAM_keep_V_1_vld_in))) and (ap_const_lv2_3 = OUTPUT_STREAM_keep_V_1_state)) or ((ap_const_lv2_1 = OUTPUT_STREAM_keep_V_1_state) and (ap_const_logic_1 = OUTPUT_STREAM_keep_V_1_ack_out)) or ((ap_const_lv2_2 = OUTPUT_STREAM_keep_V_1_state) and (ap_const_logic_1 = OUTPUT_STREAM_keep_V_1_vld_in)))) then 
                    OUTPUT_STREAM_keep_V_1_state <= ap_const_lv2_3;
                else 
                    OUTPUT_STREAM_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_STREAM_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_STREAM_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = OUTPUT_STREAM_last_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_STREAM_last_V_1_vld_out))) then 
                                        OUTPUT_STREAM_last_V_1_sel_rd <= not(OUTPUT_STREAM_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_STREAM_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_STREAM_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = OUTPUT_STREAM_last_V_1_ack_in) and (ap_const_logic_1 = OUTPUT_STREAM_last_V_1_vld_in))) then 
                                        OUTPUT_STREAM_last_V_1_sel_wr <= not(OUTPUT_STREAM_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_STREAM_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_STREAM_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = OUTPUT_STREAM_last_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_last_V_1_vld_in)) or ((ap_const_lv2_3 = OUTPUT_STREAM_last_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_last_V_1_vld_in) and (ap_const_logic_1 = OUTPUT_STREAM_last_V_1_ack_out)))) then 
                    OUTPUT_STREAM_last_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = OUTPUT_STREAM_last_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_last_V_1_ack_out)) or ((ap_const_lv2_3 = OUTPUT_STREAM_last_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_last_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_STREAM_last_V_1_vld_in)))) then 
                    OUTPUT_STREAM_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = OUTPUT_STREAM_last_V_1_vld_in) and (ap_const_logic_1 = OUTPUT_STREAM_last_V_1_ack_out))) and not(((ap_const_logic_0 = OUTPUT_STREAM_last_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_STREAM_last_V_1_vld_in))) and (ap_const_lv2_3 = OUTPUT_STREAM_last_V_1_state)) or ((ap_const_lv2_1 = OUTPUT_STREAM_last_V_1_state) and (ap_const_logic_1 = OUTPUT_STREAM_last_V_1_ack_out)) or ((ap_const_lv2_2 = OUTPUT_STREAM_last_V_1_state) and (ap_const_logic_1 = OUTPUT_STREAM_last_V_1_vld_in)))) then 
                    OUTPUT_STREAM_last_V_1_state <= ap_const_lv2_3;
                else 
                    OUTPUT_STREAM_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_STREAM_strb_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_STREAM_strb_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = OUTPUT_STREAM_strb_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_STREAM_strb_V_1_vld_out))) then 
                                        OUTPUT_STREAM_strb_V_1_sel_rd <= not(OUTPUT_STREAM_strb_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_STREAM_strb_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_STREAM_strb_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = OUTPUT_STREAM_strb_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_strb_V_1_vld_in)) or ((ap_const_lv2_3 = OUTPUT_STREAM_strb_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_strb_V_1_vld_in) and (ap_const_logic_1 = OUTPUT_STREAM_strb_V_1_ack_out)))) then 
                    OUTPUT_STREAM_strb_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = OUTPUT_STREAM_strb_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_strb_V_1_ack_out)) or ((ap_const_lv2_3 = OUTPUT_STREAM_strb_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_strb_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_STREAM_strb_V_1_vld_in)))) then 
                    OUTPUT_STREAM_strb_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = OUTPUT_STREAM_strb_V_1_vld_in) and (ap_const_logic_1 = OUTPUT_STREAM_strb_V_1_ack_out))) and not(((ap_const_logic_0 = OUTPUT_STREAM_strb_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_STREAM_strb_V_1_vld_in))) and (ap_const_lv2_3 = OUTPUT_STREAM_strb_V_1_state)) or ((ap_const_lv2_1 = OUTPUT_STREAM_strb_V_1_state) and (ap_const_logic_1 = OUTPUT_STREAM_strb_V_1_ack_out)) or ((ap_const_lv2_2 = OUTPUT_STREAM_strb_V_1_state) and (ap_const_logic_1 = OUTPUT_STREAM_strb_V_1_vld_in)))) then 
                    OUTPUT_STREAM_strb_V_1_state <= ap_const_lv2_3;
                else 
                    OUTPUT_STREAM_strb_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_STREAM_user_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_STREAM_user_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = OUTPUT_STREAM_user_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_STREAM_user_V_1_vld_out))) then 
                                        OUTPUT_STREAM_user_V_1_sel_rd <= not(OUTPUT_STREAM_user_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_STREAM_user_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_STREAM_user_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = OUTPUT_STREAM_user_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_user_V_1_vld_in)) or ((ap_const_lv2_3 = OUTPUT_STREAM_user_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_user_V_1_vld_in) and (ap_const_logic_1 = OUTPUT_STREAM_user_V_1_ack_out)))) then 
                    OUTPUT_STREAM_user_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = OUTPUT_STREAM_user_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_user_V_1_ack_out)) or ((ap_const_lv2_3 = OUTPUT_STREAM_user_V_1_state) and (ap_const_logic_0 = OUTPUT_STREAM_user_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_STREAM_user_V_1_vld_in)))) then 
                    OUTPUT_STREAM_user_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = OUTPUT_STREAM_user_V_1_vld_in) and (ap_const_logic_1 = OUTPUT_STREAM_user_V_1_ack_out))) and not(((ap_const_logic_0 = OUTPUT_STREAM_user_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_STREAM_user_V_1_vld_in))) and (ap_const_lv2_3 = OUTPUT_STREAM_user_V_1_state)) or ((ap_const_lv2_1 = OUTPUT_STREAM_user_V_1_state) and (ap_const_logic_1 = OUTPUT_STREAM_user_V_1_ack_out)) or ((ap_const_lv2_2 = OUTPUT_STREAM_user_V_1_state) and (ap_const_logic_1 = OUTPUT_STREAM_user_V_1_vld_in)))) then 
                    OUTPUT_STREAM_user_V_1_state <= ap_const_lv2_3;
                else 
                    OUTPUT_STREAM_user_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state5) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = INPUT_STREAM_data_V_0_vld_out) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state5) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state5);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = INPUT_STREAM_data_V_0_vld_out) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state8) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state8) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state8);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state11) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state11) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then 
                    ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state11);
                elsif ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state21) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif (((tmp_3_fu_397_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state21)) then 
                        ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state21);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
                elsif (((tmp_3_fu_397_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                    ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i1_0_i_reg_267_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i1_0_i_reg_267 <= ap_const_lv14_0;
            elsif (((exitcond2_i_reg_540 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                i1_0_i_reg_267 <= i_1_reg_544;
            end if; 
        end if;
    end process;

    i2_0_i_reg_279_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                i2_0_i_reg_279 <= ap_const_lv15_0;
            elsif (((exitcond1_i_reg_549 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                i2_0_i_reg_279 <= i_2_reg_553;
            end if; 
        end if;
    end process;

    i3_0_i_reg_324_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_3_fu_397_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                i3_0_i_reg_324 <= ap_const_lv15_0;
            elsif (((exitcond_i_fu_490_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
                i3_0_i_reg_324 <= i_4_fu_496_p2;
            end if; 
        end if;
    end process;

    i_0_i_i_reg_291_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                i_0_i_i_reg_291 <= ap_const_lv31_0;
            elsif (((tmp_10_fu_422_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                i_0_i_i_reg_291 <= i_3_reg_562;
            end if; 
        end if;
    end process;

    i_0_i_reg_255_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond3_i_reg_531 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_0_i_reg_255 <= i_reg_535;
            elsif (((ap_const_logic_1 = INPUT_STREAM_data_V_0_vld_out) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_0_i_reg_255 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    j_0_i_i_reg_313_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                j_0_i_i_reg_313 <= j_reg_608;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                j_0_i_i_reg_313 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    k_0_i_i_reg_302_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_16_fu_451_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                k_0_i_i_reg_302 <= k_reg_585;
            elsif (((tmp_3_fu_397_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                k_0_i_i_reg_302 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                A_PART_reg_595 <= a_q0;
                tmp_14_reg_600 <= tmp_14_fu_443_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = INPUT_STREAM_data_V_0_load_A)) then
                INPUT_STREAM_data_V_0_payload_A <= INPUT_STREAM_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = INPUT_STREAM_data_V_0_load_B)) then
                INPUT_STREAM_data_V_0_payload_B <= INPUT_STREAM_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = INPUT_STREAM_data_V_0_vld_out) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                K_reg_525 <= INPUT_STREAM_data_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = INPUT_STREAM_data_V_0_vld_out) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                M_reg_513 <= INPUT_STREAM_data_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = INPUT_STREAM_data_V_0_vld_out) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                N_reg_518 <= INPUT_STREAM_data_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = OUTPUT_STREAM_data_V_1_load_A)) then
                OUTPUT_STREAM_data_V_1_payload_A <= out_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = OUTPUT_STREAM_data_V_1_load_B)) then
                OUTPUT_STREAM_data_V_1_payload_B <= out_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = OUTPUT_STREAM_last_V_1_load_A)) then
                OUTPUT_STREAM_last_V_1_payload_A <= last_assign_reg_662;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = OUTPUT_STREAM_last_V_1_load_B)) then
                OUTPUT_STREAM_last_V_1_payload_B <= last_assign_reg_662;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                ap_reg_pp3_iter1_exitcond_i_reg_648 <= exitcond_i_reg_648;
                exitcond_i_reg_648 <= exitcond_i_fu_490_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                b_load_reg_633 <= b_q0;
                tmp_18_reg_623 <= tmp_18_fu_477_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                c_load_reg_638 <= c_q0;
                tmp_21_reg_643 <= tmp_21_fu_481_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                exitcond1_i_reg_549 <= exitcond1_i_fu_376_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                exitcond2_i_reg_540 <= exitcond2_i_fu_359_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exitcond3_i_reg_531 <= exitcond3_i_fu_342_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                i_1_reg_544 <= i_1_fu_365_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                i_2_reg_553 <= i_2_fu_382_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                i_3_reg_562 <= i_3_fu_402_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                i_reg_535 <= i_fu_348_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                j_reg_608 <= j_fu_456_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                    k_0_i_i_cast_reg_577(30 downto 0) <= k_0_i_i_cast_fu_418_p1(30 downto 0);
                k_reg_585 <= k_fu_427_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_fu_490_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                last_assign_reg_662 <= last_assign_fu_507_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_16_fu_451_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                tmp_17_reg_613 <= tmp_17_fu_462_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_3_fu_397_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                tmp_7_reg_567 <= tmp_7_fu_408_p2;
                tmp_9_reg_572 <= tmp_9_fu_413_p2;
            end if;
        end if;
    end process;
    k_0_i_i_cast_reg_577(31) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, INPUT_STREAM_data_V_0_vld_out, OUTPUT_STREAM_data_V_1_ack_in, OUTPUT_STREAM_keep_V_1_ack_in, OUTPUT_STREAM_strb_V_1_ack_in, OUTPUT_STREAM_user_V_1_ack_in, OUTPUT_STREAM_last_V_1_ack_in, OUTPUT_STREAM_id_V_1_ack_in, OUTPUT_STREAM_dest_V_1_ack_in, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter2, exitcond3_i_fu_342_p2, ap_enable_reg_pp0_iter0, exitcond2_i_fu_359_p2, ap_enable_reg_pp1_iter0, exitcond1_i_fu_376_p2, ap_enable_reg_pp2_iter0, tmp_3_fu_397_p2, ap_CS_fsm_state14, ap_CS_fsm_state15, tmp_10_fu_422_p2, ap_CS_fsm_state17, tmp_16_fu_451_p2, exitcond_i_fu_490_p2, ap_enable_reg_pp3_iter0, ap_block_pp0_stage0_subdone, ap_block_pp1_stage0_subdone, ap_block_pp2_stage0_subdone, ap_block_pp3_stage0_subdone, ap_CS_fsm_state24)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = INPUT_STREAM_data_V_0_vld_out) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = INPUT_STREAM_data_V_0_vld_out) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = INPUT_STREAM_data_V_0_vld_out) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((exitcond3_i_fu_342_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((exitcond3_i_fu_342_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((exitcond2_i_fu_359_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((exitcond2_i_fu_359_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if (not(((exitcond1_i_fu_376_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((exitcond1_i_fu_376_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((tmp_3_fu_397_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                if (((tmp_10_fu_422_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if (((tmp_16_fu_451_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_pp3_stage0 => 
                if ((not(((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (exitcond_i_fu_490_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) and not(((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif ((((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (exitcond_i_fu_490_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state24 => 
                if ((not(((ap_const_logic_0 = OUTPUT_STREAM_dest_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_STREAM_id_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_STREAM_last_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_STREAM_user_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_STREAM_strb_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_STREAM_keep_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_STREAM_data_V_1_ack_in))) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    INPUT_STREAM_TDATA_blk_n_assign_proc : process(INPUT_STREAM_data_V_0_state, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond3_i_reg_531, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, exitcond2_i_reg_540, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, exitcond1_i_reg_549)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_boolean_0 = ap_block_pp2_stage0) and (exitcond1_i_reg_549 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0) and (exitcond2_i_reg_540 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (exitcond3_i_reg_531 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            INPUT_STREAM_TDATA_blk_n <= INPUT_STREAM_data_V_0_state(0);
        else 
            INPUT_STREAM_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    INPUT_STREAM_TREADY <= INPUT_STREAM_dest_V_0_state(1);
    INPUT_STREAM_data_V_0_ack_in <= INPUT_STREAM_data_V_0_state(1);

    INPUT_STREAM_data_V_0_ack_out_assign_proc : process(INPUT_STREAM_data_V_0_vld_out, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond3_i_reg_531, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, exitcond2_i_reg_540, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, exitcond1_i_reg_549, ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001)
    begin
        if ((((exitcond1_i_reg_549 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((exitcond2_i_reg_540 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond3_i_reg_531 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_logic_1 = INPUT_STREAM_data_V_0_vld_out) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_const_logic_1 = INPUT_STREAM_data_V_0_vld_out) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_const_logic_1 = INPUT_STREAM_data_V_0_vld_out) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            INPUT_STREAM_data_V_0_ack_out <= ap_const_logic_1;
        else 
            INPUT_STREAM_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    INPUT_STREAM_data_V_0_data_out_assign_proc : process(INPUT_STREAM_data_V_0_payload_A, INPUT_STREAM_data_V_0_payload_B, INPUT_STREAM_data_V_0_sel)
    begin
        if ((ap_const_logic_1 = INPUT_STREAM_data_V_0_sel)) then 
            INPUT_STREAM_data_V_0_data_out <= INPUT_STREAM_data_V_0_payload_B;
        else 
            INPUT_STREAM_data_V_0_data_out <= INPUT_STREAM_data_V_0_payload_A;
        end if; 
    end process;

    INPUT_STREAM_data_V_0_load_A <= (not(INPUT_STREAM_data_V_0_sel_wr) and INPUT_STREAM_data_V_0_state_cmp_full);
    INPUT_STREAM_data_V_0_load_B <= (INPUT_STREAM_data_V_0_state_cmp_full and INPUT_STREAM_data_V_0_sel_wr);
    INPUT_STREAM_data_V_0_sel <= INPUT_STREAM_data_V_0_sel_rd;
    INPUT_STREAM_data_V_0_state_cmp_full <= '0' when (INPUT_STREAM_data_V_0_state = ap_const_lv2_1) else '1';
    INPUT_STREAM_data_V_0_vld_in <= INPUT_STREAM_TVALID;
    INPUT_STREAM_data_V_0_vld_out <= INPUT_STREAM_data_V_0_state(0);

    INPUT_STREAM_dest_V_0_ack_out_assign_proc : process(INPUT_STREAM_data_V_0_vld_out, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond3_i_reg_531, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, exitcond2_i_reg_540, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, exitcond1_i_reg_549, ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001)
    begin
        if ((((exitcond1_i_reg_549 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((exitcond2_i_reg_540 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond3_i_reg_531 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_logic_1 = INPUT_STREAM_data_V_0_vld_out) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_const_logic_1 = INPUT_STREAM_data_V_0_vld_out) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_const_logic_1 = INPUT_STREAM_data_V_0_vld_out) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            INPUT_STREAM_dest_V_0_ack_out <= ap_const_logic_1;
        else 
            INPUT_STREAM_dest_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    INPUT_STREAM_dest_V_0_vld_in <= INPUT_STREAM_TVALID;
    OUTPUT_STREAM_TDATA <= OUTPUT_STREAM_data_V_1_data_out;

    OUTPUT_STREAM_TDATA_blk_n_assign_proc : process(OUTPUT_STREAM_data_V_1_state, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0, exitcond_i_reg_648, ap_enable_reg_pp3_iter2, ap_reg_pp3_iter1_exitcond_i_reg_648)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_reg_pp3_iter1_exitcond_i_reg_648 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp3_stage0) and (exitcond_i_reg_648 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)))) then 
            OUTPUT_STREAM_TDATA_blk_n <= OUTPUT_STREAM_data_V_1_state(1);
        else 
            OUTPUT_STREAM_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    OUTPUT_STREAM_TDEST <= OUTPUT_STREAM_dest_V_1_data_out;
    OUTPUT_STREAM_TID <= OUTPUT_STREAM_id_V_1_data_out;
    OUTPUT_STREAM_TKEEP <= OUTPUT_STREAM_keep_V_1_data_out;
    OUTPUT_STREAM_TLAST <= OUTPUT_STREAM_last_V_1_data_out;
    OUTPUT_STREAM_TSTRB <= OUTPUT_STREAM_strb_V_1_data_out;
    OUTPUT_STREAM_TUSER <= OUTPUT_STREAM_user_V_1_data_out;
    OUTPUT_STREAM_TVALID <= OUTPUT_STREAM_dest_V_1_state(0);
    OUTPUT_STREAM_data_V_1_ack_in <= OUTPUT_STREAM_data_V_1_state(1);
    OUTPUT_STREAM_data_V_1_ack_out <= OUTPUT_STREAM_TREADY;

    OUTPUT_STREAM_data_V_1_data_out_assign_proc : process(OUTPUT_STREAM_data_V_1_payload_A, OUTPUT_STREAM_data_V_1_payload_B, OUTPUT_STREAM_data_V_1_sel)
    begin
        if ((ap_const_logic_1 = OUTPUT_STREAM_data_V_1_sel)) then 
            OUTPUT_STREAM_data_V_1_data_out <= OUTPUT_STREAM_data_V_1_payload_B;
        else 
            OUTPUT_STREAM_data_V_1_data_out <= OUTPUT_STREAM_data_V_1_payload_A;
        end if; 
    end process;

    OUTPUT_STREAM_data_V_1_load_A <= (not(OUTPUT_STREAM_data_V_1_sel_wr) and OUTPUT_STREAM_data_V_1_state_cmp_full);
    OUTPUT_STREAM_data_V_1_load_B <= (OUTPUT_STREAM_data_V_1_state_cmp_full and OUTPUT_STREAM_data_V_1_sel_wr);
    OUTPUT_STREAM_data_V_1_sel <= OUTPUT_STREAM_data_V_1_sel_rd;
    OUTPUT_STREAM_data_V_1_state_cmp_full <= '0' when (OUTPUT_STREAM_data_V_1_state = ap_const_lv2_1) else '1';

    OUTPUT_STREAM_data_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, exitcond_i_reg_648, ap_block_pp3_stage0_11001)
    begin
        if (((exitcond_i_reg_648 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
            OUTPUT_STREAM_data_V_1_vld_in <= ap_const_logic_1;
        else 
            OUTPUT_STREAM_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    OUTPUT_STREAM_data_V_1_vld_out <= OUTPUT_STREAM_data_V_1_state(0);
    OUTPUT_STREAM_dest_V_1_ack_in <= OUTPUT_STREAM_dest_V_1_state(1);
    OUTPUT_STREAM_dest_V_1_ack_out <= OUTPUT_STREAM_TREADY;
    OUTPUT_STREAM_dest_V_1_data_out <= ap_const_lv5_0;
    OUTPUT_STREAM_dest_V_1_sel <= OUTPUT_STREAM_dest_V_1_sel_rd;

    OUTPUT_STREAM_dest_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, exitcond_i_reg_648, ap_block_pp3_stage0_11001)
    begin
        if (((exitcond_i_reg_648 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
            OUTPUT_STREAM_dest_V_1_vld_in <= ap_const_logic_1;
        else 
            OUTPUT_STREAM_dest_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    OUTPUT_STREAM_dest_V_1_vld_out <= OUTPUT_STREAM_dest_V_1_state(0);
    OUTPUT_STREAM_id_V_1_ack_in <= OUTPUT_STREAM_id_V_1_state(1);
    OUTPUT_STREAM_id_V_1_ack_out <= OUTPUT_STREAM_TREADY;
    OUTPUT_STREAM_id_V_1_data_out <= ap_const_lv5_0;
    OUTPUT_STREAM_id_V_1_sel <= OUTPUT_STREAM_id_V_1_sel_rd;

    OUTPUT_STREAM_id_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, exitcond_i_reg_648, ap_block_pp3_stage0_11001)
    begin
        if (((exitcond_i_reg_648 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
            OUTPUT_STREAM_id_V_1_vld_in <= ap_const_logic_1;
        else 
            OUTPUT_STREAM_id_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    OUTPUT_STREAM_id_V_1_vld_out <= OUTPUT_STREAM_id_V_1_state(0);
    OUTPUT_STREAM_keep_V_1_ack_in <= OUTPUT_STREAM_keep_V_1_state(1);
    OUTPUT_STREAM_keep_V_1_ack_out <= OUTPUT_STREAM_TREADY;
    OUTPUT_STREAM_keep_V_1_data_out <= ap_const_lv4_F;
    OUTPUT_STREAM_keep_V_1_sel <= OUTPUT_STREAM_keep_V_1_sel_rd;

    OUTPUT_STREAM_keep_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, exitcond_i_reg_648, ap_block_pp3_stage0_11001)
    begin
        if (((exitcond_i_reg_648 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
            OUTPUT_STREAM_keep_V_1_vld_in <= ap_const_logic_1;
        else 
            OUTPUT_STREAM_keep_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    OUTPUT_STREAM_keep_V_1_vld_out <= OUTPUT_STREAM_keep_V_1_state(0);
    OUTPUT_STREAM_last_V_1_ack_in <= OUTPUT_STREAM_last_V_1_state(1);
    OUTPUT_STREAM_last_V_1_ack_out <= OUTPUT_STREAM_TREADY;

    OUTPUT_STREAM_last_V_1_data_out_assign_proc : process(OUTPUT_STREAM_last_V_1_payload_A, OUTPUT_STREAM_last_V_1_payload_B, OUTPUT_STREAM_last_V_1_sel)
    begin
        if ((ap_const_logic_1 = OUTPUT_STREAM_last_V_1_sel)) then 
            OUTPUT_STREAM_last_V_1_data_out <= OUTPUT_STREAM_last_V_1_payload_B;
        else 
            OUTPUT_STREAM_last_V_1_data_out <= OUTPUT_STREAM_last_V_1_payload_A;
        end if; 
    end process;

    OUTPUT_STREAM_last_V_1_load_A <= (not(OUTPUT_STREAM_last_V_1_sel_wr) and OUTPUT_STREAM_last_V_1_state_cmp_full);
    OUTPUT_STREAM_last_V_1_load_B <= (OUTPUT_STREAM_last_V_1_state_cmp_full and OUTPUT_STREAM_last_V_1_sel_wr);
    OUTPUT_STREAM_last_V_1_sel <= OUTPUT_STREAM_last_V_1_sel_rd;
    OUTPUT_STREAM_last_V_1_state_cmp_full <= '0' when (OUTPUT_STREAM_last_V_1_state = ap_const_lv2_1) else '1';

    OUTPUT_STREAM_last_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, exitcond_i_reg_648, ap_block_pp3_stage0_11001)
    begin
        if (((exitcond_i_reg_648 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
            OUTPUT_STREAM_last_V_1_vld_in <= ap_const_logic_1;
        else 
            OUTPUT_STREAM_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    OUTPUT_STREAM_last_V_1_vld_out <= OUTPUT_STREAM_last_V_1_state(0);
    OUTPUT_STREAM_strb_V_1_ack_in <= OUTPUT_STREAM_strb_V_1_state(1);
    OUTPUT_STREAM_strb_V_1_ack_out <= OUTPUT_STREAM_TREADY;
    OUTPUT_STREAM_strb_V_1_data_out <= ap_const_lv4_F;
    OUTPUT_STREAM_strb_V_1_sel <= OUTPUT_STREAM_strb_V_1_sel_rd;

    OUTPUT_STREAM_strb_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, exitcond_i_reg_648, ap_block_pp3_stage0_11001)
    begin
        if (((exitcond_i_reg_648 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
            OUTPUT_STREAM_strb_V_1_vld_in <= ap_const_logic_1;
        else 
            OUTPUT_STREAM_strb_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    OUTPUT_STREAM_strb_V_1_vld_out <= OUTPUT_STREAM_strb_V_1_state(0);
    OUTPUT_STREAM_user_V_1_ack_in <= OUTPUT_STREAM_user_V_1_state(1);
    OUTPUT_STREAM_user_V_1_ack_out <= OUTPUT_STREAM_TREADY;
    OUTPUT_STREAM_user_V_1_data_out <= ap_const_lv4_0;
    OUTPUT_STREAM_user_V_1_sel <= OUTPUT_STREAM_user_V_1_sel_rd;

    OUTPUT_STREAM_user_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, exitcond_i_reg_648, ap_block_pp3_stage0_11001)
    begin
        if (((exitcond_i_reg_648 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
            OUTPUT_STREAM_user_V_1_vld_in <= ap_const_logic_1;
        else 
            OUTPUT_STREAM_user_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    OUTPUT_STREAM_user_V_1_vld_out <= OUTPUT_STREAM_user_V_1_state(0);

    a_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_CS_fsm_state15, tmp_2_fu_354_p1, tmp_13_fu_438_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            a_address0 <= tmp_13_fu_438_p1(11 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            a_address0 <= tmp_2_fu_354_p1(11 - 1 downto 0);
        else 
            a_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    a_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            a_ce0 <= ap_const_logic_1;
        else 
            a_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    a_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond3_i_reg_531, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond3_i_reg_531 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            a_we0 <= ap_const_logic_1;
        else 
            a_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(6);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(17);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(7);
    ap_CS_fsm_state13 <= ap_CS_fsm(9);
    ap_CS_fsm_state14 <= ap_CS_fsm(10);
    ap_CS_fsm_state15 <= ap_CS_fsm(11);
    ap_CS_fsm_state16 <= ap_CS_fsm(12);
    ap_CS_fsm_state17 <= ap_CS_fsm(13);
    ap_CS_fsm_state18 <= ap_CS_fsm(14);
    ap_CS_fsm_state19 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(16);
    ap_CS_fsm_state24 <= ap_CS_fsm(18);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state7 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(INPUT_STREAM_data_V_0_vld_out, ap_enable_reg_pp0_iter1, exitcond3_i_reg_531)
    begin
                ap_block_pp0_stage0_11001 <= ((exitcond3_i_reg_531 = ap_const_lv1_0) and (ap_const_logic_0 = INPUT_STREAM_data_V_0_vld_out) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(INPUT_STREAM_data_V_0_vld_out, ap_enable_reg_pp0_iter1, exitcond3_i_reg_531)
    begin
                ap_block_pp0_stage0_subdone <= ((exitcond3_i_reg_531 = ap_const_lv1_0) and (ap_const_logic_0 = INPUT_STREAM_data_V_0_vld_out) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(INPUT_STREAM_data_V_0_vld_out, ap_enable_reg_pp1_iter1, exitcond2_i_reg_540)
    begin
                ap_block_pp1_stage0_11001 <= ((exitcond2_i_reg_540 = ap_const_lv1_0) and (ap_const_logic_0 = INPUT_STREAM_data_V_0_vld_out) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(INPUT_STREAM_data_V_0_vld_out, ap_enable_reg_pp1_iter1, exitcond2_i_reg_540)
    begin
                ap_block_pp1_stage0_subdone <= ((exitcond2_i_reg_540 = ap_const_lv1_0) and (ap_const_logic_0 = INPUT_STREAM_data_V_0_vld_out) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp2_stage0_11001_assign_proc : process(INPUT_STREAM_data_V_0_vld_out, ap_enable_reg_pp2_iter1, exitcond1_i_reg_549)
    begin
                ap_block_pp2_stage0_11001 <= ((exitcond1_i_reg_549 = ap_const_lv1_0) and (ap_const_logic_0 = INPUT_STREAM_data_V_0_vld_out) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp2_stage0_subdone_assign_proc : process(INPUT_STREAM_data_V_0_vld_out, ap_enable_reg_pp2_iter1, exitcond1_i_reg_549)
    begin
                ap_block_pp2_stage0_subdone <= ((exitcond1_i_reg_549 = ap_const_lv1_0) and (ap_const_logic_0 = INPUT_STREAM_data_V_0_vld_out) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp3_stage0_11001_assign_proc : process(ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter2, ap_block_state22_io, ap_block_state23_io)
    begin
                ap_block_pp3_stage0_11001 <= (((ap_const_boolean_1 = ap_block_state23_io) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state22_io) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp3_stage0_subdone_assign_proc : process(ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter2, ap_block_state22_io, ap_block_state23_io)
    begin
                ap_block_pp3_stage0_subdone <= (((ap_const_boolean_1 = ap_block_state23_io) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state22_io) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1)));
    end process;

        ap_block_state11_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state12_pp2_stage0_iter1_assign_proc : process(INPUT_STREAM_data_V_0_vld_out, exitcond1_i_reg_549)
    begin
                ap_block_state12_pp2_stage0_iter1 <= ((exitcond1_i_reg_549 = ap_const_lv1_0) and (ap_const_logic_0 = INPUT_STREAM_data_V_0_vld_out));
    end process;

        ap_block_state21_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state22_io_assign_proc : process(OUTPUT_STREAM_data_V_1_ack_in, exitcond_i_reg_648)
    begin
                ap_block_state22_io <= ((exitcond_i_reg_648 = ap_const_lv1_0) and (ap_const_logic_0 = OUTPUT_STREAM_data_V_1_ack_in));
    end process;

        ap_block_state22_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state23_io_assign_proc : process(OUTPUT_STREAM_data_V_1_ack_in, ap_reg_pp3_iter1_exitcond_i_reg_648)
    begin
                ap_block_state23_io <= ((ap_reg_pp3_iter1_exitcond_i_reg_648 = ap_const_lv1_0) and (ap_const_logic_0 = OUTPUT_STREAM_data_V_1_ack_in));
    end process;

        ap_block_state23_pp3_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state24_assign_proc : process(OUTPUT_STREAM_data_V_1_ack_in, OUTPUT_STREAM_keep_V_1_ack_in, OUTPUT_STREAM_strb_V_1_ack_in, OUTPUT_STREAM_user_V_1_ack_in, OUTPUT_STREAM_last_V_1_ack_in, OUTPUT_STREAM_id_V_1_ack_in, OUTPUT_STREAM_dest_V_1_ack_in)
    begin
                ap_block_state24 <= ((ap_const_logic_0 = OUTPUT_STREAM_dest_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_STREAM_id_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_STREAM_last_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_STREAM_user_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_STREAM_strb_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_STREAM_keep_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_STREAM_data_V_1_ack_in));
    end process;

        ap_block_state5_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_pp0_stage0_iter1_assign_proc : process(INPUT_STREAM_data_V_0_vld_out, exitcond3_i_reg_531)
    begin
                ap_block_state6_pp0_stage0_iter1 <= ((exitcond3_i_reg_531 = ap_const_lv1_0) and (ap_const_logic_0 = INPUT_STREAM_data_V_0_vld_out));
    end process;

        ap_block_state8_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state9_pp1_stage0_iter1_assign_proc : process(INPUT_STREAM_data_V_0_vld_out, exitcond2_i_reg_540)
    begin
                ap_block_state9_pp1_stage0_iter1 <= ((exitcond2_i_reg_540 = ap_const_lv1_0) and (ap_const_logic_0 = INPUT_STREAM_data_V_0_vld_out));
    end process;


    ap_condition_pp0_exit_iter0_state5_assign_proc : process(exitcond3_i_fu_342_p2)
    begin
        if ((exitcond3_i_fu_342_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state8_assign_proc : process(exitcond2_i_fu_359_p2)
    begin
        if ((exitcond2_i_fu_359_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state8 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state11_assign_proc : process(exitcond1_i_fu_376_p2)
    begin
        if ((exitcond1_i_fu_376_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state11 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state21_assign_proc : process(exitcond_i_fu_490_p2)
    begin
        if ((exitcond_i_fu_490_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state21 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state21 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(OUTPUT_STREAM_data_V_1_ack_in, OUTPUT_STREAM_keep_V_1_ack_in, OUTPUT_STREAM_strb_V_1_ack_in, OUTPUT_STREAM_user_V_1_ack_in, OUTPUT_STREAM_last_V_1_ack_in, OUTPUT_STREAM_id_V_1_ack_in, OUTPUT_STREAM_dest_V_1_ack_in, ap_CS_fsm_state24)
    begin
        if ((not(((ap_const_logic_0 = OUTPUT_STREAM_dest_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_STREAM_id_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_STREAM_last_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_STREAM_user_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_STREAM_strb_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_STREAM_keep_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_STREAM_data_V_1_ack_in))) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter2, ap_enable_reg_pp3_iter0)
    begin
        if (((ap_enable_reg_pp3_iter2 = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i1_0_i_phi_fu_271_p4_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, exitcond2_i_reg_540, i1_0_i_reg_267, i_1_reg_544)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (exitcond2_i_reg_540 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_phi_mux_i1_0_i_phi_fu_271_p4 <= i_1_reg_544;
        else 
            ap_phi_mux_i1_0_i_phi_fu_271_p4 <= i1_0_i_reg_267;
        end if; 
    end process;


    ap_phi_mux_i2_0_i_phi_fu_283_p4_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, exitcond1_i_reg_549, i2_0_i_reg_279, i_2_reg_553)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (exitcond1_i_reg_549 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_phi_mux_i2_0_i_phi_fu_283_p4 <= i_2_reg_553;
        else 
            ap_phi_mux_i2_0_i_phi_fu_283_p4 <= i2_0_i_reg_279;
        end if; 
    end process;


    ap_phi_mux_i_0_i_phi_fu_259_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond3_i_reg_531, i_0_i_reg_255, i_reg_535)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (exitcond3_i_reg_531 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_i_0_i_phi_fu_259_p4 <= i_reg_535;
        else 
            ap_phi_mux_i_0_i_phi_fu_259_p4 <= i_0_i_reg_255;
        end if; 
    end process;


    ap_ready_assign_proc : process(OUTPUT_STREAM_data_V_1_ack_in, OUTPUT_STREAM_keep_V_1_ack_in, OUTPUT_STREAM_strb_V_1_ack_in, OUTPUT_STREAM_user_V_1_ack_in, OUTPUT_STREAM_last_V_1_ack_in, OUTPUT_STREAM_id_V_1_ack_in, OUTPUT_STREAM_dest_V_1_ack_in, ap_CS_fsm_state24)
    begin
        if ((not(((ap_const_logic_0 = OUTPUT_STREAM_dest_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_STREAM_id_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_STREAM_last_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_STREAM_user_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_STREAM_strb_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_STREAM_keep_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_STREAM_data_V_1_ack_in))) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    b_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, ap_CS_fsm_state17, tmp_6_fu_371_p1, tmp_20_fu_472_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            b_address0 <= tmp_20_fu_472_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            b_address0 <= tmp_6_fu_371_p1(14 - 1 downto 0);
        else 
            b_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    b_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0_11001, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            b_ce0 <= ap_const_logic_1;
        else 
            b_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_we0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, exitcond2_i_reg_540, ap_block_pp1_stage0_11001)
    begin
        if (((exitcond2_i_reg_540 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            b_we0 <= ap_const_logic_1;
        else 
            b_we0 <= ap_const_logic_0;
        end if; 
    end process;


    c_address0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, tmp_18_fu_477_p1, ap_CS_fsm_state18, tmp_s_fu_388_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            c_address0 <= tmp_18_fu_477_p1(15 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            c_address0 <= tmp_s_fu_388_p1(15 - 1 downto 0);
        else 
            c_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    c_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0_11001, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            c_ce0 <= ap_const_logic_1;
        else 
            c_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    c_we0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, exitcond1_i_reg_549, ap_block_pp2_stage0_11001)
    begin
        if (((exitcond1_i_reg_549 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            c_we0 <= ap_const_logic_1;
        else 
            c_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_i_fu_376_p2 <= "1" when (ap_phi_mux_i2_0_i_phi_fu_283_p4 = ap_const_lv15_61A8) else "0";
    exitcond2_i_fu_359_p2 <= "1" when (ap_phi_mux_i1_0_i_phi_fu_271_p4 = ap_const_lv14_34BC) else "0";
    exitcond3_i_fu_342_p2 <= "1" when (ap_phi_mux_i_0_i_phi_fu_259_p4 = ap_const_lv11_546) else "0";
    exitcond_i_fu_490_p2 <= "1" when (i3_0_i_reg_324 = ap_const_lv15_61A8) else "0";
    i_0_i_i_cast_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_i_reg_291),32));
    i_1_fu_365_p2 <= std_logic_vector(unsigned(ap_phi_mux_i1_0_i_phi_fu_271_p4) + unsigned(ap_const_lv14_1));
    i_2_fu_382_p2 <= std_logic_vector(unsigned(ap_phi_mux_i2_0_i_phi_fu_283_p4) + unsigned(ap_const_lv15_1));
    i_3_fu_402_p2 <= std_logic_vector(unsigned(i_0_i_i_reg_291) + unsigned(ap_const_lv31_1));
    i_4_fu_496_p2 <= std_logic_vector(unsigned(i3_0_i_reg_324) + unsigned(ap_const_lv15_1));
    i_fu_348_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_0_i_phi_fu_259_p4) + unsigned(ap_const_lv11_1));
    j_0_i_i_cast_fu_447_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i_i_reg_313),32));
    j_fu_456_p2 <= std_logic_vector(unsigned(j_0_i_i_reg_313) + unsigned(ap_const_lv31_1));
    k_0_i_i_cast_fu_418_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_i_i_reg_302),32));
    k_fu_427_p2 <= std_logic_vector(unsigned(k_0_i_i_reg_302) + unsigned(ap_const_lv31_1));
    last_assign_fu_507_p2 <= "1" when (i3_0_i_reg_324 = ap_const_lv15_61A7) else "0";

    out_address0_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0, tmp_18_reg_623, ap_enable_reg_pp3_iter0, ap_CS_fsm_state20, tmp_15_fu_502_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) then 
            out_address0 <= tmp_15_fu_502_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            out_address0 <= tmp_18_reg_623(15 - 1 downto 0);
        else 
            out_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_ce0_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter0, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or ((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)))) then 
            out_ce0 <= ap_const_logic_1;
        else 
            out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_d0 <= std_logic_vector(unsigned(c_load_reg_638) + unsigned(tmp_21_reg_643));

    out_we0_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            out_we0 <= ap_const_logic_1;
        else 
            out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_fu_422_p2 <= "1" when (signed(k_0_i_i_cast_fu_418_p1) < signed(K_reg_525)) else "0";
    tmp_12_fu_433_p2 <= std_logic_vector(unsigned(k_0_i_i_cast_fu_418_p1) + unsigned(tmp_7_reg_567));
        tmp_13_fu_438_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_12_fu_433_p2),64));

    tmp_14_fu_443_p1 <= k_0_i_i_cast_reg_577(31 - 1 downto 0);
    tmp_14_fu_443_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(N_reg_518) * signed('0' &tmp_14_fu_443_p1))), 32));
    tmp_15_fu_502_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i3_0_i_reg_324),64));
    tmp_16_fu_451_p2 <= "1" when (signed(j_0_i_i_cast_fu_447_p1) < signed(N_reg_518)) else "0";
    tmp_17_fu_462_p2 <= std_logic_vector(unsigned(j_0_i_i_cast_fu_447_p1) + unsigned(tmp_9_reg_572));
        tmp_18_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_17_reg_613),64));

    tmp_19_fu_467_p2 <= std_logic_vector(unsigned(j_0_i_i_cast_fu_447_p1) + unsigned(tmp_14_reg_600));
        tmp_20_fu_472_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_19_fu_467_p2),64));

    tmp_21_fu_481_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(b_load_reg_633) * signed(A_PART_reg_595))), 32));
    tmp_2_fu_354_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_255),64));
    tmp_3_fu_397_p2 <= "1" when (signed(i_0_i_i_cast_fu_393_p1) < signed(M_reg_513)) else "0";
    tmp_6_fu_371_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_0_i_reg_267),64));
    tmp_7_fu_408_p1 <= i_0_i_i_cast_fu_393_p1(31 - 1 downto 0);
    tmp_7_fu_408_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(K_reg_525) * signed('0' &tmp_7_fu_408_p1))), 32));
    tmp_9_fu_413_p1 <= i_0_i_i_cast_fu_393_p1(31 - 1 downto 0);
    tmp_9_fu_413_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(N_reg_518) * signed('0' &tmp_9_fu_413_p1))), 32));
    tmp_s_fu_388_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i2_0_i_reg_279),64));
end behav;
